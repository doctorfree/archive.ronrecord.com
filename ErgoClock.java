/*****************************************************************Copyright (c) 1995-96 Michael Olivier and Silicon Graphics, Inc.Permission to use, copy, modify, and distribute this software and itsdocumentation for any not-for-profit purpose is hereby granted withoutfee, provided that the above copyright notice appears in all copies andthat both the copyright notice and this permission notice appear insupporting documentation, and that the name of Silicon Graphics, Inc.not be used in advertising or publicity pertaining to distribution ofthe software without specific, written prior permission.THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANYWARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.IN NO EVENT SHALL MICHAEL OLIVIER OR SILICON GRAPHICS BE LIABLE FOR ANYSPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, ORANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORYOF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE ORPERFORMANCE OF THIS SOFTWARE.******************************************************************ErgoClock - display an ergonomically correct time string.Input Parameters:    fontName        fontSize	min of 5    align	left, center, right    nudgeX	pixels to nudge line left or right    nudgeY	pixels to nudge line up (-) or down (+)    r		red fgnd color value, 0-255 range    g		green fgnd color value, 0-255 range    b		blue fgnd color value, 0-255 range    br		red bgnd color value, 0-255 range    bg	        green bgnd color value, 0-255 range    bb		blue bgnd color value, 0-255 range    link	URL to jump to on mouse click	Original idea from an old Apollo Systems Unix ErgoClock.Revision History:mvo	12/95		first versionmvo	2/17/96		rounded out input parameters;			declared version 0.9*****************************************************************/import java.awt.*;import java.lang.*;import java.net.*;import java.util.Date;import ErgoTime;public class ErgoClock extends java.applet.Applet implements Runnable {        Thread updater;    Font font;    int alignment;    URL link;    Color color;    Color bgndColor;    int nudgeX;    int nudgeY;    ErgoTime time;    public void init()     {	String fontSizeStr = getParameter("fontSize");	int fontSize = (fontSizeStr == null) ? 18 : 		   Integer.valueOf(fontSizeStr).intValue();	if (fontSize < 5)	    fontSize = 5;	String fontName = getParameter("fontName");	if (fontName == null)	    fontName = "TimesRoman";        font = new java.awt.Font(fontName, Font.PLAIN, fontSize);	String nudgeXstr = getParameter("nudgeX");	nudgeX = (nudgeXstr == null) ? 0 : 		   Integer.valueOf(nudgeXstr).intValue();	String nudgeYstr = getParameter("nudgeY");	nudgeY = (nudgeYstr == null) ? 0 : 		   Integer.valueOf(nudgeYstr).intValue();	// foreground color params	String redStr = getParameter("r");	String greenStr = getParameter("g");	String blueStr = getParameter("b");	if (redStr != null || greenStr != null || blueStr != null)	{	    int red = (redStr == null) ? 0 : Integer.valueOf(redStr).intValue();	    int green = (greenStr == null) ? 0 : Integer.valueOf(greenStr).intValue();	    int blue = (blueStr == null) ? 0 : Integer.valueOf(blueStr).intValue();	    color = new Color(red, green, blue);	}	else	{	    color = Color.blue;	}	// background color params	redStr = getParameter("br");	greenStr = getParameter("bg");	blueStr = getParameter("bb");	if (redStr != null || greenStr != null || blueStr != null)	{	    int red = (redStr == null) ? 0 : Integer.valueOf(redStr).intValue();	    int green = (greenStr == null) ? 0 : Integer.valueOf(greenStr).intValue();	    int blue = (blueStr == null) ? 0 : Integer.valueOf(blueStr).intValue();	    bgndColor = new Color(red, green, blue);	}	else	{	    // match default web page bgnd color	    bgndColor = new Color(192, 192, 192);	}	String align = getParameter("align");	if (align == null)	    alignment = -1;	else if (align.compareTo("left") == 0)	    alignment = -1;	else if (align.compareTo("center") == 0)	    alignment = 0;	else if (align.compareTo("right") == 0)	    alignment = 1;	else	{	    System.out.println("ERROR in align parameter - using center alignment");	    alignment = 0;	}	String linkStr = getParameter("link");	if (linkStr == null)	    link = null;	else	{	    try 	    { 		link = new URL(linkStr);	    } catch(MalformedURLException e) { 		System.out.println("ERROR in link parameter: " + 				   e.getMessage());		link = null;	    }	}	time = new ErgoTime();	time.init();	setBackground(bgndColor);    }        public void start()     {        updater = new Thread(this);        updater.start();    }    public void stop()     {        updater.stop();    }    public void run()     {        while (true) 	{	    try 	    {		Date today = new Date();		Thread.currentThread().sleep((60 - today.getSeconds()) * 1000);			    } catch (InterruptedException e){}	    	    repaint();        }    }    public void paint(Graphics g)     {	int y;        FontMetrics fontMetrics;        g.setFont(font);        fontMetrics = getFontMetrics(font);//        y = (bounds().height + //	     fontMetrics.getAscent() - fontMetrics.getDescent()) / 2;	y = bounds().height - fontMetrics.getDescent();	y += nudgeY;	g.setColor(color);		String s = time.update();	int x = 0;	if (alignment == 0)	{	    // center it	    int midX = bounds().width / 2;	    x = midX - fontMetrics.stringWidth(s) / 2;	}	else if (alignment == 1)	{	    // right justified	    x = bounds().width - fontMetrics.stringWidth(s);	}	x += nudgeX;	g.drawString(s, x, y);    }    public boolean mouseUp(Event evt, int x, int y)    {	if (link != null)	{	    super.getAppletContext().showDocument(link);	}	return true;    }}